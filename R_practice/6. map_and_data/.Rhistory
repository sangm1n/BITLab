y <- sample(x, size=10, replace=F)
y
y <- sample(x, size=10, replace=F)
y
y <- sample(x, size=10, replace=T)
y
y <- sample(x, size=10, replace=T)
y
y <- sample(x, size=10, replace=T)
y
y <- sample(x, size=10, replace=F)
y
y <- sample(x, size=10, replace=F)
y
y <- sample(x, size=5, replace=F)
y
y <- sample(x, size=5, replace=F)
y
x <- 1:10
y <- sample(x, size=5, replace=F)
y
y <- sample(x, size=5, replace=F)
y
y <- sample(x, size=5, replace=F)
y
y <- sample(x, size=5, replace=F)
y
x <- 1:10
y <- sample(x, size=8, replace=F)
y
y <- sample(x, size=8, replace=F)
y
y <- sample(x, size=8, replace=F)
y
y <- sample(x, size=8, replace=F)
y
x <- 1:10
y <- sample(x, size=8, replace=T)
y
y <- sample(x, size=8, replace=T)
y
y <- sample(x, size=8, replace=T)
y
y <- sample(x, size=8, replace=T)
y
ids <- sample(1:nrow(iris), size=50, replace=F)
iris.50 <- iris[ids, ]
iris.50
ids
dim(iris.50)
head(iris.50)
sample(1:20, size=5)
set.seed(100)
sample(1:20, size=5)
sample(1:20, size=5)
set.seed(100)
sample(1:20, size=5)
set.seed(100)
sample(1:20, size=5)
sample(1:20, size=5)
set.seed(100)
sample(1:20, size=5)
set.seed(1)
sample(1:20, size=5)
set.seed(1)
sample(1:20, size=5)
sample(1:20, size=5)
sample(1:20, size=5)
set.seed(1)
sample(1:20, size=5)
set.seed(1)
sample(1:20, size=5)
set.seed(2)
sample(1:20, size=5)
set.seed(2)
sample(1:20, size=5)
combn(1:5, 3)
x = c("red", "green", "blue", "black", "white")
x
combn(x, 2)
comb <- combn(x, 2)
cat(com[, i], "\n")
comb <- combn(x, 2)
cat(comb[, i], "\n")
comb <- combn(x, 2)
for (i in 1:ncol(comb)) {
cat(comb[, i], "\n")
}
comb <- combn(x, 2)
for (i in 1:ncol(comb)) {
cat(comb[, i], "\n")
}
comb
comb[, 2]
comb[, 5]
cat(comb[, 2])
agg <- aggregate(iris[, -5], by=list(iris$Species), FUN=mean)
agg
aggregate(iris[, -5], by=list(iris$Species), FUN=sum)
aggregate(iris[, -5], by=list(iris$Species), FUN=sd)
aggregate(iris[, -5], by=list(iris$Species), FUN=var)
aggregate(iris[, -5], by=list(iris$Species), FUN=sqrt)
aggregate(iris[, -5], by=list(iris$Species), FUN=mean)
aggregate(iris[, -5], by=list(품종=iris$Species), FUN=mean)
head(mtcars)
aggregate(mtcars, by=list(실린더=mtcars$cyl, 무게=mtcars$wt), FUN=max)
aggregate(mtcars, by=list(실린더=mtcars$cyl, 무게=mtcars$vs), FUN=max)
mtcars[order(mtcars$cyl), ]
x <- data.frame(name=c('a','b','c'), math=c('90','80','40'))
y <- data.frame(name=c('a','b','c'), korean=c('75','60','90'))
x
y
merge(x, y, by=c("name"))
merge(x, y)
merge(x, y)
merge(x, y, all=T)
merge(x, y, all.x)
merge(x, y, all.x=T)
x
x <- data.frame(name=c('a','b','c'), math=c('90','80'))
merge(x, y)
x <- data.frame(name=c('a','b','c'), math=c('90','80'))
y <- data.frame(name=c('a','b','c'), korean=c('75','60','90'))
x <- data.frame(name=c('a','b','c'), math=c('90','80'))
x <- data.frame(name=c('a','b','c'), math=c('90','80', 'NA'))
y <- data.frame(name=c('a','b','c'), korean=c('75','60','90'))
x
y
merge(x, y)
x <- data.frame(name=c('a','b','c'), math=c('90','80', '40'))
y <- data.frame(name=c('a','b','c'), korean=c('75','60','90'))
x
y
merge(x, y, by=c("name"))
merge(x, y)
merge(x, y)
merge(x, y, all.x=T)
x <- data.frame(name=c('a','b','c'), math=c(90,80,40))
y <- data.frame(sname=c('a','b','d'), korean=c(75,60,90))
merge(x, y)
merge(x, y, all.x=T)
merge(x, y, all.y=T)
merge(x, y, all=T)
x
y
merge(x, y, by.x=c("name"), by.y=c("sname"))
ds <- state.x77
ds[2,3] <- NA
ds[3,1] <- NA
ds[2,4] <- NA
ds[4,3] <- NA
is.na(ds)
sum(is.na(ds))
sum(ds)
sum(ds, na.rm=T)
head(ds)
num <- is.na(x[, i])
head(ds)
for(i in 1:ncol(ds)) {
num <- is.na(x[, i])
}
num <- is.na(ds[, i])
num
cat(colnames(ds[, i]))
for(i in 1:ncol(ds)) {
num <- is.na(ds[, i])
cat(colnames(ds[, i]))
}
cat(colnames(ds))
cat(colnames(ds)[i])
for(i in 1:ncol(ds)) {
num <- is.na(ds[, i])
cat(colnames(ds)[i])
}
cat(colnames(ds), "\t")
cat(colnames(ds), "\t", sum(num))
num <- is.na(ds[, i])
cat(colnames(ds), "\t", sum(num))
for(i in 1:ncol(ds)) {
num <- is.na(ds[, i])
cat(colnames(ds), "\t", sum(num))
}
for(i in 1:ncol(ds)) {
num <- is.na(ds[, i])
cat(colnames(ds), "\t", sum(num), "\n")
}
for(i in 1:ncol(ds)) {
num <- is.na(ds[, i])
cat(colnames(ds)[i], "\t", sum(num), "\n")
}
for(i in 1:ncol(ds)) {
num <- is.na(ds[, i])
cat(colnames(ds)[i], "\t\t", sum(num), "\n")
}
return(sum(is.na(y)))
col_na <- function(y) {
return(sum(is.na(y)))
}
apply(ds, 2, FUN=col_na)
rowSums(is.na(ds))
sum(rowSums(is.na(ds)) > 0)
rowSums(is.na(ds))
sum(rowSums(is.na(ds)) > 0)
head(iris)
order(iris$Sepal.Length)
sort(iris$Sepal.Length)
head(iris[sort(iris$Sepal.Length), ])
head(iris[order(iris$Sepal.Length), ])
v1
v1[order(v1)]
head(iris[order(iris$Sepal.Length), ])
iris[sort(iris$Sepal.Length), ]
head(iris)
iris
iris$Sepal.Length
subset(iris$Sepal.Length == 4.3)
subset(iris, Sepal.Length == 4.3)
sp <- split(iris, iris$Species)
sp
head(sp)
head(sp)
sp$setosa
sp <- split(iris, iris$Sepal.Length)
sp
summary(sp)
sp$setosa
length(sp)
length(sp$setosa)
head(iris)
subset(iris, Species == "setosa")
subset(iris, Sepal.Length > 7.0)
x <- 1:10
y <- sample(x, size=8, replace=T)
y
ids <- sample(1:nrow(iris), size=50, replace=F)
iris.50 <- iris[ids, ]
iris.50
ids
dim(iris.50)
head(iris.50)
sample(1:20, size=5)
set.seed(2)
sample(1:20, size=5)
combn(1:5, 3)
x = c("red", "green", "blue", "black", "white")
x
comb <- combn(x, 2)
for (i in 1:ncol(comb)) {
cat(comb[, i], "\n")
}
comb
comb[, 2]
comb[, 5]
cat(comb[, 2])
aggregate(iris[, -5], by=list(품종=iris$Species), FUN=mean)
agg
head(mtcars)
aggregate(mtcars, by=list(실린더=mtcars$cyl, 무게=mtcars$vs), FUN=max)
mtcars[order(mtcars$cyl), ]
x <- data.frame(name=c('a','b','c'), math=c('90','80', '40'))
y <- data.frame(name=c('a','b','c'), korean=c('75','60','90'))
x
y
merge(x, y, by=c("name"))
merge(x, y)
merge(x, y)
merge(x, y, all=T)
merge(x, y, all.x=T)
x
merge(x, y)
x <- data.frame(name=c('a','b','c'), math=c(90,80,40))
y <- data.frame(sname=c('a','b','d'), korean=c(75,60,90))
merge(x, y)
merge(x, y, all.x=T)
merge(x, y, all.y=T)
merge(x, y, all=T)
x
y
merge(x, y, by.x=c("name"), by.y=c("sname"))
ds <- state.x77
ds[2,3] <- NA
ds[3,1] <- NA
ds[2,4] <- NA
ds[4,3] <- NA
is.na(ds)
sum(is.na(ds))
sum(ds)
sum(ds, na.rm=T)
head(ds)
for(i in 1:ncol(ds)) {
num <- is.na(ds[, i])
cat(colnames(ds)[i], "\t\t", sum(num), "\n")
}
col_na <- function(y) {
return(sum(is.na(y)))
}
apply(ds, 2, FUN=col_na)
rowSums(is.na(ds))
sum(rowSums(is.na(ds)) > 0)
install.packages("treemap")
library(treemap)
data("GNI2014")
head(GNI2014)
install.packages("treemap")
install.packages("treemap")
head(GNI2014)
library(treemap)
data(GNI2014)
head(GNI2014)
ds <- state.x77
ds[2,3] <- NA
ds[3,1] <- NA
ds[2,4] <- NA
ds[4,3] <- NA
head(ds)
count_na <- function(x) {
return(sum(is.na(x)))
}
apply(ds, 2, FUN=count_na)
ds[!complete.cases(ds), ]
sum(rowSums(is.na(ds)) > 0)
ds.new <- ds[complete.cases(ds), ]
ds.new
###
st <- data.frame(state.x77)
head(st)
par(mfrow=c(2, 4))
for(i in 1:ncol(st)) {
boxplot(st[, i], main=colnames(st[i]))
}
par(mfrow=c(1, 1))
head(st)
val <- boxplot.stats(st$Population)$out
st$Population[st$Population %in% val] <- NA
val <- boxplot.stats(st$Income)$out
st$Income[st$Income %in% val] <- NA
val <- boxplot.stats(st$Area)$out
st$Area[st$Area %in% val] <- NA
st.2 <- st[!complete.cases(st), ]
library(wordcloud)
library(KoNLP)
install.packages("KoNLP")
install.packages("KoNLP")
library(KoNLP)
Sys.getenv(JAVA_HOME)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre1.8.0_241")
Sys.getenv(JAVA_HOME)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre1.8.0_241")
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
library(ggmap)
library(ggplot2)
register_google("AIzaSyAU_3MpDapUjPlkDXFlNskojuSN8hKx1o4")
### 1
gc <- geocode(enc2utf8("서울시청"))
cen <- as.numeric(gc)
map <- get_googlemap(center=cen, maptype="roadmap",
size=c(600,600))
ggmap(map)
gc <- geocode(enc2utf8("금강산"))
cen <- as.numeric(gc)
map <- get_googlemap(center=cen, maptype="hybrid",
size=c(500,500), zoom=8)
ggmap(map)
ggmap(map)
library(ggmap)
library(ggplot2)
register_google("AIzaSyAU_3MpDapUjPlkDXFlNskojuSN8hKx1o4")
### 1
gc <- geocode(enc2utf8("서울시청"))
cen <- as.numeric(gc)
map <- get_googlemap(center=cen, maptype="roadmap",
size=c(600,600))
ggmap(map)
gc <- geocode(enc2utf8("강남역"))
cen <- as.numeric(gc)
map <- get_googlemap(center=cen, maptype="roadmap",
size=c(640,640), zoom=16)
ggmap(map)
gc <- geocode(enc2utf8("금강산"))
cen <- as.numeric(gc)
map <- get_googlemap(center=cen, maptype="hybrid",
size=c(500,500), zoom=8)
ggmap(map)
gc <- geocode(enc2utf8("강남역"))
cen <- as.numeric(gc)
map <- get_googlemap(center=cen, maptype="roadmap",
size=c(640,640), zoom=16)
ggmap(map)
cen <- c(127.397692, 36.337058)
map <- get_googlemap(center=cen, maptype="roadmap", zoom=9)
ggmap(map)
cen <- c(135.502330, 34.693594)
map <- get_googlemap(center=cen, maptype="roadmap")
ggmap(map)
### 2
addrs <- c("서울특별시 양천구 신정동 목동동로 105",
"서울특별시 강서구 화곡6동 화곡로 302",
"서울특별시 마포구 성산2동 월드컵로 212",
"서울특별시 용산구 이태원1동 녹사평대로 150",
"서울특별시 서초구 서초2동 남부순환로 2584")
names <- c("양천구청", "강서구청", "마포구청", "용산구청", "서초구청")
gc <- geocode(enc2utf8(addrs))
dt <- data.frame(gc, names)
cen <- c(mean(gc$lon), mean(gc$lat))
map <- get_googlemap(center=cen, maptype="roadmap",
zoom=11, marker=gc)
gmap <- ggmap(map)
gmap + geom_text(data=dt, aes(x=lon, y=lat),
size=5, label=dt$names, color="navy",
fontface="bold")
### 3
names <- c("인천광역시", "대전광역시", "대구광역시",
"부산광역시", "광주광역시", "울산광역시")
gc <- geocode(enc2utf8(names))
cen <- c(mean(gc$lon), mean(gc$lat))
dt <- data.frame(names, gc)
map <- get_googlemap(center=cen, maptype="roadmap",
zoom=7, marker=gc)
gmap <- ggmap(map)
gmap + geom_text(data=dt, aes(x=lon, y=lat),
size=5, label=dt$names, color="navy",
fontface="bold")
### 4
addrs <- c("서울시 성북구 보국문로262길 103",
"강원도 속초시 설악산로 833번지",
"강원도 원주시 소초면 무쇠점2길 26",
"강원도 평창군 진부면 오대산로 2",
"강원도 태백시 태백산로4778")
names <- c("북한산국립공원", "설악산국립공원",
"치악산국립공원", "오대산국립공원",
"태백산국립공원")
gc <- geocode(enc2utf8(addrs))
dt <- data.frame(names, gc)
cen <- c(mean(dt$lon), mean(dt$lat))
map <- get_googlemap(center=cen, maptype="satellite",
zoom=8, marker=gc)
gmap <- ggmap(map)
gmap + geom_text(data=dt, aes(x=lon, y=lat),
size=5, label=dt$names, color="white",
fontface="bold")
### 5
library(treemap)
data(GNI2014)
name <- subset(GNI2014, continent == "North America")
names <- name$country
gc <- geocode(enc2utf8(names))
dt <- data.frame(gc, name)
cen <- c(mean(gc$lon), mean(gc$lat)+10)
map <- get_googlemap(center=cen, zoom=3)
gmap <- ggmap(map)
gmap + geom_point(data=dt, aes(x=lon, y=lat,
size=population),
alpha=0.7, color="red") +
scale_size_continuous(range=c(2, 15))
### 6
setwd("C:\\Users\\sangmin\\Desktop\\code\\RStudio\\R_practice\\6. map_and_data")
data <- read.csv("도로교통공단_시도_시군구별_월별_교통사고(2018).csv")
seoul <- subset(data,
select=c("시군구", "월", "발생건수"),
시도=="서울")
gu.data <- aggregate(list(발생건수=seoul$"발생건수"),
by=list(시군구=seoul$"시군구"), sum)
gu.names <- as.vector(gu.data$"시군구")
gc <- geocode(enc2utf8(gu.names))
cen <- c(mean(gc$lon), mean(gc$lat))
dt <- data.frame(gu.data, gc)
map <- get_googlemap(center=cen, maptype="roadmap",
zoom=11, size=c(640,640))
gmap <- ggmap(map)
gmap + geom_point(data=dt,
aes(x=lon, y=lat, size=발생건수),
alpha=0.5, color="red") +
scale_size_continuous(range=c(1, 15))
### 7
setwd("C:\\Users\\sangmin\\Desktop\\code\\RStudio\\R_practice\\6. map_and_data")
data <- read.csv("도로교통공단_시도_시군구별_월별_교통사고(2018).csv")
data.2 <- subset(data,
select=c("시도", "월", "사망자수"),
시도!="세종")
si.data <- aggregate(list(사망자수=data.2$"사망자수"),
by=list(시도=data.2$"시도"), sum)
si.names <- as.vector(si.data$"시도")
gc <- geocode(enc2utf8(si.names))
cen <- c(mean(gc$lon), mean(gc$lat)-0.5)
dt <- data.frame(si.data, gc)
map <- get_googlemap(center=cen, maptype="roadmap",
zoom=7, size=c(640,640))
gmap <- ggmap(map)
gmap + geom_point(data=dt,
aes(x=lon, y=lat, size=사망자수),
alpha=0.5, color="black") +
scale_size_continuous(range=c(1, 15))
### 8
setwd("C:\\Users\\sangmin\\Desktop\\code\\RStudio\\R_practice\\6. map_and_data")
data <- read.csv("도로교통공단_시도_시군구별_월별_교통사고(2018).csv")
data.2 <- subset(data,
select=c("시도", "월", "부상자수"),
시도!="세종" & (월=="07월" | 월=="08월"))
si.data <- aggregate(list(부상자수=data.2$"부상자수"),
by=list(시도=data.2$"시도"), sum)
si.names <- as.vector(si.data$"시도")
gc <- geocode(enc2utf8(si.names))
cen <- c(mean(gc$lon), mean(gc$lat))
dt <- data.frame(si.data, gc)
map <- get_googlemap(center=cen, maptype="roadmap",
zoom=7, size=c(640,640))
gmap <- ggmap(map)
gmap + geom_point(data=dt,
aes(x=lon, y=lat, size=부상자수),
alpha=0.5, color="blue") +
scale_size_continuous(range=c(1, 15))
