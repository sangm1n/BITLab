pred <- round(pred, 0)
answer <- mydata[, 1]
answer
acc <- mean(answer == pred)
acc
pred <- round(pred, 0)
answer <- mydata[, 1]
df <- data.frame(test, answer)
df <- data.frame(pred, answer)
head(df)
names(df) <- c("예측", "실제")
View(df)
test <- mydata[-1]
pred <- predict(model, test)
pred <- round(pred, 0)
answer <- mydata[, 1]
df <- data.frame(pred, answer)
names(df) <- c("예측", "실제")
acc <- mean(answer == pred)
acc
### 7
library(mlbench)
data(PimaIndiansDiabetes)
head(PimaIndiansDiabetes)
set.seed(100)
dt <- data(PimaIndiansDiabetes)
nrow(dt)
dt <- data(PimaIndiansDiabetes)
nrow(dt)
str(dt)
dt <- data.frame(PimaIndiansDiabetes)
str(dt)
dt
head(dt)
nrow(dt)
train <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
test <- sample(1:nrow(dt), size=nrow(dt)*0.4, replace=F)
test
test <- sample(1:nrow(dt), size=nrow(dt)*0.4, replace=F)
test
set.seed(100)
test <- sample(1:nrow(dt), size=nrow(dt)*0.4, replace=F)
test
set.seed(100)
train <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
train
train <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
train
train
train
set.seed(100)
train <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
train
set.seed(100)
test <- sample(1:nrow(dt), size=nrow(dt)*0.4, replace=F)
test
test <- sample(1:nrow(dt), size=nrow(dt)*0.4, replace=F)
test
set.seed(100)
test <- sample(1:nrow(dt), size=nrow(dt)*0.4, replace=F)
test
s <- data.frame(1:10)
s
set.seed(100)
train <- sample(10, size=4, replace=F)
train <- sample(10, size=4, replace=F)
train
test <- sample(10, size=6, replace=F)
test
set.seed(100)
train <- sample(10, size=4, replace=F)
test <- sample(10, size=6, replace=F)
train
test
set.seed(100)
train <- sample(10, size=4, replace=F)
set.seed(100)
test <- sample(10, size=6, replace=F)
train
test
set.seed(100)
train <- sample(10, size=4, replace=F)
set.seed(100)
test <- sample(10, size=6, replace=F)
train
test
train <- sample(10, size=4, replace=F)
test <- sample(10, size=6, replace=F)
train
test
train <- sample(s, size=4, replace=F)
train <- sample(10, size=4, replace=F)
set.seed(100)
test <- sample(-train, size=6, replace=F)
train <- sample(10, size=4, replace=F)
set.seed(100)
test <- sample(s-train, size=6, replace=F)
s-train
s[s-train]
train <- sample(10, size=4, replace=F)
test <- sample(s-train, size=6, replace=F)
train <- sample(10, size=4, replace=F)
test <- sample(10, size=6, replace=F)
train
test
train <- sample(1:nrow(s), size=4, replace=F)
e <- subset(s, train == s)
e
s <- data.frame(1:10)
train <- sample(1:nrow(s), size=4, replace=F)
s <- data.frame(1:10)
set.seed(100)
train <- sample(1:nrow(s), size=4, replace=F)
e <- subset(s, train == s)
e
train
s
e <- subset(s, train == s$X1.10)
e <- subset(s, train == as.integer(s)
e <- subset(s, train == as.integer(s))
e <- subset(s, train == as.integer(s))
e <- subset(s, train == as.integer(s))
e <- subset(s, train == list(s))
e
list(s)
str(train)
str(s)
as.integer(s[, 1])
e <- subset(s, as.integer(s[, 1]) == train)
e
train <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
test <- sample(1:nrow(dt), size=nrow(dt)*0.4, replace=F)
train
dt
head(dt)
train
train <- sample(dt, size=nrow(dt)*0.6, replace=F)
train <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
test <- sample(1:nrow(dt), size=nrow(dt)*0.4, replace=F)
dt[train[4],]
set.seed(100)
train <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
train
dt[train[4],]
dt[train[4],]
dt[train[4],]
set.seed(100)
train <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
dt[train[4],]
train
dt[train[row(train)],]
data.frame(dt[train, ])
train <- data.frame(dt[train, ])
test <- data.frame(dt[-train, ])
test <- data.frame(dt[!train, ])
row(train)
nrow(train)
nrow(dt)
train.cnt <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
train <- data.frame(dt[train.cnt, ])
train.cnt
nrow(dt)
row(dt)
row(dt)
rownames(dt)
str(rownames(dt))
subset(dt,
dt[train.cnt,])
subset(dt,
dt == dt[train.cnt,])
subset(dt,
dt[, ] == dt[train.cnt,])
head(dt)
subset(dt,
dt[1, ] == dt[train.cnt,])
dt[train.cnt]
dt[train.cnt, ]
dt - dt[train.cnt, ]
dt[nrow(dt), ]
dt[, ]
dt[!train.cnt, ]
dt[train.cnt, ]
nrow(dt)
c(1:768)
c(1:768) - train.cnt
v <- c(1:768)
v
v[!train.cnt]
v[!!train.cnt]
v[v != train.cnt]
str(v)
str(train.cnt)
!train.cnt
dt <- dt[!dt[train.cnt, ],]
dt <- dt[!dt[train.cnt],]
dt
dt <- data.frame(PimaIndiansDiabetes)
dt
dt2 <- dt[!dt[train.cnt],]
dt
dt2 <- dt[!train.cnt,]
dt
dt2
### 8
library(mlbench)
dt <- data.frame(PimaIndiansDiabetes)
nrow(dt)
set.seed(100)
train.cnt <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
train <- data.frame(dt[train.cnt, ])
head(train)
test <- dt[-train.cnt, ]
test
sort(train)
train.cnt <- sort(train.cnt)
train <- data.frame(dt[train.cnt, ])
test <- dt[-train.cnt, ]
train
head(train)
head(test)
### 8
library(mlbench)
dt <- data.frame(PimaIndiansDiabetes)
set.seed(100)
train.cnt <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
train.cnt <- sort(train.cnt)
train <- data.frame(dt[train.cnt, ])
test <- dt[-train.cnt, ]
str(train)
str(test)
### 8
library(mlbench)
dt <- data.frame(PimaIndiansDiabetes)
set.seed(100)
train.cnt <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
train.cnt <- sort(train.cnt)
train <- dt[train.cnt, ]
test <- dt[-train.cnt, ]
str(train)
str(test)
levels(train$diabetes)
model <- glm(diabetes~., data=train)
train$diabetes <- as.integer(train$diabetes)
head(train)
model <- glm(diabetes~., data=train)
pred <- predict(model, test)
pred
pred <- round(pred, 0)
answer <- train$diabetes
acc <- mean(answer == pred)
answer <- train$diabetes
answer
pred
str(pred)
str(answer)
pred <- as.integer(round(pred, 0))
answer <- train$diabetes
str(pred)
str(answer)
acc <- mean(pred == answer)
answer <- test$diabetes
str(answer)
acc <- mean(pred == answer)
acc
answer <- as.integer(test$diabetes)
answer
pred
acc <- mean(pred == answer)
acc
### 9
library(mlbench)
data(Glass)
str(Glass)
set.seed(100)
train.cnt <- sample(1:nrow(Glass), size=nrow(Glass)*0.6, replace=F)
train.cnt <- sort(train.cnt)
train <- Glass[train.cnt, ]
test <- Glass[-train.cnt, ]
head(Glass)
levels(Glass$Type)
train$Type <- as.integer(train$Type)
head(Glass)
levels(Glass$Type)
model <- glm(Type~., data=Glass)
train$Type <- as.integer(train$Type)
model <- glm(Type~., data=train)
pred <- predict(model, test)
pred <- round(pred, 0)
pred
answer <- as.integer(test$Glass)
acc <- mean(pred == answer)
acc
answer
### 9
library(mlbench)
data(Glass)
set.seed(100)
train.cnt <- sample(1:nrow(Glass), size=nrow(Glass)*0.6, replace=F)
train.cnt <- sort(train.cnt)
train <- Glass[train.cnt, ]
test <- Glass[-train.cnt, ]
train$Type <- as.integer(train$Type)
model <- glm(Type~., data=train)
pred <- predict(model, test)
pred <- round(pred, 0)
answer <- as.integer(test$Type)
acc <- mean(pred == answer)
acc
data.frame(pred, answer)
View(data.frame(pred, answer))
View(Glass)
test$Type
levels(answer)
unique(answer)
answer <- test$Type
acc <- mean(pred == answer)
acc
unique(train$Type)
train$Type <- c(1,2,3,5,6,7)
train$Type <- as.integer(train$Type)
answer <- as.integer(test$Type)
acc <- mean(pred == answer)
acc
### 8
library(mlbench)
dt <- data.frame(PimaIndiansDiabetes)
set.seed(100)
train.cnt <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
train.cnt <- sort(train.cnt)
train <- dt[train.cnt, ]
test <- dt[-train.cnt, ]
train$diabetes <- as.integer(train$diabetes)
model <- glm(diabetes~., data=train)
pred <- predict(model, test)
pred <- round(pred, 0)
answer <- as.integer(test$diabetes)
acc <- mean(pred == answer)
acc
### 9
library(mlbench)
data(Glass)
set.seed(100)
train.cnt <- sample(1:nrow(Glass), size=nrow(Glass)*0.6, replace=F)
train.cnt <- sort(train.cnt)
train <- Glass[train.cnt, ]
test <- Glass[-train.cnt, ]
train$Type <- as.integer(train$Type)
model <- glm(Type~., data=train)
pred <- predict(model, test)
pred <- round(pred, 0)
answer <- as.integer(test$Type)
acc <- mean(pred == answer)
acc
### 1
st <- data.frame(state.x77)
plot(Murder~Illiteracy, data=st, pch=16)
model <- lm(Murder~Illiteracy, st)
abline(model)
b <- coef(model)[1]
W <- coef(model)[2]
md <- c(0.5, 1.0, 1.5)
for (i in 1:3) {
cat(W * md[i] + b, "\n")
}
### 2
plot(Volume~Girth, data=trees)
model <- lm(Volume~Girth, trees)
abline(model)
b <- coef(model)[1]
W <- coef(model)[2]
vo <- c(8.5, 9.0, 9.5)
for (i in 1:3) {
cat(W * vo[i] + b, "\n")
}
### 2
plot(Volume~Girth, data=trees, pch=16)
model <- lm(Volume~Girth, trees)
abline(model)
b <- coef(model)[1]
W <- coef(model)[2]
vo <- c(8.5, 9.0, 9.5)
for (i in 1:3) {
cat(W * vo[i] + b, "\n")
}
### 3
plot(pressure~temperature, data=pressure, pch=16)
model <- lm(pressure~temperature, pressure)
abline(model)
b <- coef(model)[1]
W <- coef(model)[2]
pr <- c(65, 95, 155)
for (i in 1:3) {
cat(W * pr[i] + b, "\n")
}
### 4
plot(trees, pch=16, col="red")
model <- lm(Volume~Girth+Height, trees)
b <- coef(model)[1]
W1 <- coef(model)[2]
W2 <- coef(model)[3]
pred <- b + W1*trees$Girth + W2*trees$Height
pred
compare <- data.frame(pred, trees[, 3], pred-trees[, 3])
names(compare) <- c("예측값", "실제값", "예측값-실제값")
compare
### 4
plot(trees, pch=16, col="red")
model <- lm(Volume~Girth+Height, trees)
b <- coef(model)[1]
W1 <- coef(model)[2]
W2 <- coef(model)[3]
pred <- b + W1*trees$Girth + W2*trees$Height
pred
compare <- data.frame(pred, trees[, 3], pred-trees[, 3])
names(compare) <- c("예측값", "실제값", "예측값-실제값")
compare
### 5
library(mlbench)
data(BostonHousing)
B.data <- BostonHousing[-4]
model <- lm(medv~., data=B.data)
summary(model)
mod2 <- stepAIC(model)
summary(mod2)
### 6
model <- lm(mpg~., data=mtcars)
summary(model)
mod2 <- stepAIC(model)
summary(model)
### 6
model <- lm(mpg~., data=mtcars)
summary(model)
mod2 <- stepAIC(model)
summary(model)
mod2 <- stepAIC(model)
summary(model)
summary(mod2)
### 7
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
model <- glm(admit~., data=mydata)
test <- mydata[-1]
pred <- predict(model, test)
pred <- round(pred, 0)
answer <- mydata[, 1]
acc <- mean(answer == pred)
acc
### 8
library(mlbench)
dt <- data.frame(PimaIndiansDiabetes)
set.seed(100)
train.cnt <- sample(1:nrow(dt), size=nrow(dt)*0.6, replace=F)
train.cnt <- sort(train.cnt)
train <- dt[train.cnt, ]
test <- dt[-train.cnt, ]
train$diabetes <- as.integer(train$diabetes)
model <- glm(diabetes~., data=train)
pred <- predict(model, test)
pred <- round(pred, 0)
answer <- as.integer(test$diabetes)
acc <- mean(pred == answer)
acc
### 9
library(mlbench)
data(Glass)
set.seed(100)
train.cnt <- sample(1:nrow(Glass), size=nrow(Glass)*0.6, replace=F)
train.cnt <- sort(train.cnt)
train <- Glass[train.cnt, ]
test <- Glass[-train.cnt, ]
train$Type <- as.integer(train$Type)
model <- glm(Type~., data=train)
pred <- predict(model, test)
pred <- round(pred, 0)
answer <- as.integer(test$Type)
acc <- mean(pred == answer)
acc
mydata <- iris[, 1:4]
fit <- kmeans(x=mydata, centers=3)
fit
fit$cluster
fit$centers
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
subset(mydata, fit$cluster==2)
fit <- kmeans(x=mydata, centers=4)
fit$cluster
fit$centers
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
subset(mydata, fit$cluster==2)
fit <- kmeans(x=mydata, centers=3)
fit$cluster
fit$centers
library(cluster)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
clusplot(mydata, fit$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
clusplot(mydata, fit$cluster, color=F, shade=TRUE, labels=2, lines=0)
clusplot(mydata, fit$cluster, color=TRUE, shade=F, labels=2, lines=0)
clusplot(mydata, fit$cluster, color=T, shade=T, labels=2, lines=0)
clusplot(mydata, fit$cluster, color=T, shade=T, labels=2, lines=1)
clusplot(mydata, fit$cluster, color=T, shade=T, labels=1, lines=1)
### 2
gangdong <- subset(ds.total[, 1], 시군구명=="강동구")
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jre1.8.0_241")
library(RColorBrewer)
library(wordcloud)
library(KoNLP)
setwd("C:\\Users\\sangmin\\Desktop\\code\\RStudio\\R_practice\\7. word_cloud")
setwd("C:\\Users\\sangmin\\Desktop\\code\\RStudio\\R_practice\\7. word_cloud")
### 1
text1 <- readLines("ex_10-1.txt", encoding="UTF-8")
buildDictionary(ext_dic="woorimalsam")
